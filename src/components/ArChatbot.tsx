import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { MessageCircle, X } from "lucide-react";

const arabicChatbotOptions = [
  {
    label: "ุฃุฑุบุจ ุจุงูุญุตูู ุนูู ุฑุฎุตุฉ ุชุฌุงุฑูุฉ",
    response: [
      "ูุณุนุฏูุง ูุณุงุนุฏุชู ูู ุงุณุชุฎุฑุงุฌ ุงูุฑุฎุตุฉ ุงูุชุฌุงุฑูุฉ! ูููุฑ ุฎุฏูุงุช ูุชูุงููุฉ ุชุดูู:",
      "โข ุงุณุชุดุงุฑุฉ ูุฌุงููุฉ ูุงุฎุชูุงุฑ ุงููุดุงุท ุงูุชุฌุงุฑู ุงูููุงุณุจ",
      "โข ูุณุงุนุฏุฉ ูู ุชุญุฏูุฏ ุงูููุทูุฉ ุงูููุงุณุจุฉ ููุฑุฎุตุฉ",
      "โข ุฅููุงุก ูุงูุฉ ุงูุฅุฌุฑุงุกุงุช ุงูุญููููุฉ ุจููุงุกุฉ ูุณุฑุนุฉ",
      "ูู ุชุฑุบุจ ูู ุงูุชูุงุตู ูุน ุฃุญุฏ ูุณุชุดุงุฑููุง ูููุฒูุฏ ูู ุงูุชูุงุตููุ",
    ],
  },
  {
    label: "ุงุณุชุดุงุฑุฉ ูุงููููุฉ ุฃู ุญูู ุงูุชุฃุดูุฑุฉ ูุงูุฅูุงูุฉ",
    response: [
      "ูููุฑ ุฎุฏูุงุช ุดุงููุฉ ููุชุฃุดูุฑุงุช ูุงูุฅูุงูุฉ ูุงูุงุณุชุดุงุฑุงุช ุงููุงููููุฉ",
      "โข ุชุฃุดูุฑุฉ ุงููุณุชุซูุฑ ูุงูุดุฑูู ูู ุดุฑูุฉ",
      "โข ุชุฃุดูุฑุงุช ุงูุฅูุงูุฉ ููุนุงุฆูุฉ ูุงูููุธููู",
      "โข ุฎุฏูุงุช ุชุฌุฏูุฏ ุงูุฅูุงูุฉ ูุชุนุฏูู ุงููุถุน",
      "ูููููุง ูุณุงุนุฏุชู ูู ุงูุญุตูู ุนูู ุงูุชุฃุดูุฑุฉ ุงูููุงุณุจุฉ ูุฃูุฏุงูู.",
    ],
  },
  {
    label: "ูุนูููุงุช ุงูุชูุงุตู",
    response: [
      "ููููู ุงูุชูุงุตู ูุนูุง ูู ุฎูุงู:",
      "๐ ุงููุงุชู: +971 56 433 1993",
      "๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: info@takedgroup.com",
      "๐ข ุงูุนููุงู: ุงูุทุงุจู ุงูุฃุฑุถูุ ูุฑูุฒ ุงูููุฒุฑ - ุฏูุฑุฉ - ุฏุจู",
      "โฐ ุณุงุนุงุช ุงูุนูู: ุงูุฃุญุฏ - ุงูุฎููุณุ 9:00 ุตุจุงุญูุง - 6:00 ูุณุงุกู",
    ],
  },
];

export function ArChatbot() {
  const [open, setOpen] = useState(false);
  const [started, setStarted] = useState(false);
  const [messages, setMessages] = useState<
    Array<{ from: string; text: string }>
  >([]);
  const [showOptions, setShowOptions] = useState(false);
  const [showChatIcon, setShowChatIcon] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleScroll = () => {
      setShowChatIcon(window.scrollY > 300);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  useEffect(() => {
    setMessages([
      {
        from: "bot",
        text: "ูุฑุญุจูุง ุจู ูู ุชุฃููุฏ! ๐ ููู ูููููุง ูุณุงุนุฏุชู ุงููููุ",
      },
    ]);
  }, []);

  const handleStart = () => {
    setStarted(true);
    setShowOptions(true);
  };

  const handleOption = async (option: (typeof arabicChatbotOptions)[0]) => {
    setMessages((msgs) => [...msgs, { from: "user", text: option.label }]);
    setShowOptions(false);

    setTimeout(() => {
      option.response.forEach((line, index) => {
        setTimeout(() => {
          setMessages((msgs) => [...msgs, { from: "bot", text: line }]);
        }, index * 500);
      });
      setTimeout(
        () => setShowOptions(true),
        option.response.length * 500 + 500
      );
    }, 1000);
  };

  if (!showChatIcon) return null;

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {!open ? (
        <Button
          onClick={() => setOpen(true)}
          className="rounded-full w-14 h-14 bg-sky-950 hover:bg-sky-800 shadow-lg"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      ) : (
        <Card
          className="w-80 h-96 shadow-xl bg-white border border-gray-200"
          dir="rtl"
        >
          <CardHeader className="bg-sky-950 text-white rounded-t-lg">
            <div className="flex justify-between items-center">
              <CardTitle className="text-lg">ุชุฃููุฏ - ุงููุณุงุนุฏ ุงูุฐูู</CardTitle>
              <Button variant="ghost" size="sm" onClick={() => setOpen(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>
          </CardHeader>
          <CardContent className="p-4 h-full overflow-auto bg-white">
            <div className="space-y-3">
              {messages.map((msg, i) => (
                <div
                  key={i}
                  className={`text-sm ${
                    msg.from === "bot" ? "text-right" : "text-left"
                  }`}
                >
                  <div
                    className={`inline-block p-2 rounded-lg max-w-[80%] ${
                      msg.from === "bot"
                        ? "bg-gray-100 text-gray-800"
                        : "bg-sky-950 text-white"
                    }`}
                  >
                    {msg.text}
                  </div>
                </div>
              ))}

              {!started && (
                <Button onClick={handleStart} className="w-full bg-sky-950">
                  ุงุจุฏุฃ ุงููุญุงุฏุซุฉ
                </Button>
              )}

              {showOptions && (
                <div className="space-y-2">
                  {arabicChatbotOptions.map((option, i) => (
                    <Button
                      key={i}
                      variant="outline"
                      onClick={() => handleOption(option)}
                      className="w-full text-right text-sm h-auto p-2"
                    >
                      {option.label}
                    </Button>
                  ))}
                </div>
              )}
            </div>
            <div ref={messagesEndRef} />
          </CardContent>
        </Card>
      )}
    </div>
  );
}
